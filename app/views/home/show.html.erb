<h3>Welcome</h3>
<p>RATE is a general platform for evaluation of biometric verification algorithm and explore of biometric data. It aims at providing a convenient tool for doing biometric research, it solves various problems in conducting biometric experiment - data and annotation management, benchmark description and distributed evluation, etc.</p>
<p>There are 4 main concepts in RATE, they are described in the following sections.</p>
<h3>View</h3>
<p>View refers to collection of samples (e.g. a group of fingerprint images). View is useful when researchers want to group samples with specific research propose. For example, finger vein verificaion researchers may want to know the general performance on different fingers, they could then create 3 views for index finger, middle finger, and ring finger (finger vein verification just don't like thumb or little finger). </p>
<h3>Benchmark</h3>
<p>Basically, you upload an algorithm, and RATE runs it for you. There should be a place that you describe the detail of which sample is going to match with which another one - this is called <strong>benchmark</strong> in RATE. Benchmark is created upon view, all samples referred in a benchmark should be in one specific view. There are many ways to automatically generate a benchmark:
</p>
<ul>
    <li>
        General benchmark. General benchmark is used for evaluation of an algorithm, because this is the most usual case for one to use RATE, we call them <strong>"general"</strong>. It ramdonly choose classes and samples from a view and generate inner matches and inter matches between samples.
    </li>
    <li>
        All inner benchmark. Generate matches so that all samples from a view are matched against all samples in the sample class.
    </li>
    <li>
        All inter benchmark. Generate matches so that all samples from a view a re matches against all samples in other classes.
    </li>
    <li>
        All benchmark. Generate all possible matches in a view.
    </li>
    <li>
        File benchmark. Upload a file filled with wanted matches between samples. Samples are referred by its UUID.
    </li>
</ul>
<h3>Algorithm</h3>
<p>Algorithm is two Win32 excutables in RATE: enroll.exe and match.exe, for the enrollment step and the matching step. The two executables should read input from the command line arguments and output results to the standard output or a designated file with the right exit value. They must obey the following rules</p>

<div class="table-responsive">
    <table class="table">
        <tr>
            <th>Executable</th>
            <th>Decription</th>
            <th>Command line args</th>
            <th>Standard output</th>
            <th>Exit value</th>
            <th>Time Limit</th>
            <th>Memory limit</th>
        </tr>
        <tr>
            <td>Enroll.exe</td>
            <td>Create template</td>
            <td>Paths of the input images and output template file</td>
            <td>None</td>
            <td>0: success;
                Else: fail</td>
            <td>3s</td>
            <td>64M</td>
        </tr>
        <tr>
            <td>Match.exe</td>
            <td>Match two templates</td>
            <td>Paths of two templates for matching</td>
            <td>Similarity degree is indicated by a float number between [0-1.0], with 0 meaning not similar at all, and 1 meaning exact the same</td>
            <td>0: success; Else: fail</td>
            <td>1s</td>
            <td>64M</td>
        </tr>
    </table>
</div>

<p class="ratered">Keep in mind that the right exit value is very important, and you may fail the evaluation if you donâ€™t care about it.</p>
<p>The executables will be used in a command line like follows:</p>
<pre>
    > Enroll.exe /path/to/read/image.bmp /path/to/write/template.t
    > Match.exe /path/to/template1.t /path/to/template2.t
</pre>
<ul>
    <li><a class="ratered" href="/static/ExampleCode.zip">Example code</a></li>
    <li>There are also time and space limit for each executable. Time requirement for Enroll.exe is within 3 seconds. Time requirement for Match.exe is within 100ms. Memory requirement for both excutables is within 128M. RATE will be strict on these constraints.</li>
    <li>The evaluation platform is a distributed system running on 32-bit Windows system. So all the executables must be 32-bit Windows executables. Runtime libraries provided are:</li>
    <ul>
        <li>Microsoft Visual C++ 2005 Redistributable Package (x86)</li>
        <li>Microsoft Visual C++ 2005 SP1 Redistributable Package (x86)</li>
        <li>Microsoft Visual C++ 2008 Redistributable Package (x86)</li>
        <li>Microsoft Visual C++ 2008 SP1 Redistributable Package (x86)</li>
        <li>Microsoft Visual C++ 2010 Redistributable Package (x86)</li>
        <li>Microsoft Visual C++ 2010 SP1 Redistributable Package (x86)</li>
        <li>Visual C++ Redistributable for Visual Studio 2012 Update 4</li>
        <li>Visual C++ Redistributable Packages for Visual Studio 2013</li>
        <li>OpenCV 2.4.9</li>
    </ul>
    <li>If you would like to use other libraries, make sure that they can work well on a machine with just the same previous environment. Static build might be a good option.</li>
    <li>Example code</li>
</ul>
<h3>Task</h3>
<p>Task is the result of running an algorithm on a benchmark. RATE's distributed system will run the task for you on a given benchmark, when done, it will run an automatic analysis process.</p>

<h3>Papers</h3>
<ul>
    <li><a class="ratered" href="/static/wideline.pdf">Finger-vein Authentication Based on Wide Line Detector and Pattern Normalization</a></li>
    <li><a class="ratered" href="/static/posture-correct.pdf">A Finger Posture Change Correction Method for Finger-vein Recognition</a></li>
    <li><a class="ratered" href="/static/icb.pdf">The ICB-2015 Competition on Finger Vein Recognition</a></li>
</ul>